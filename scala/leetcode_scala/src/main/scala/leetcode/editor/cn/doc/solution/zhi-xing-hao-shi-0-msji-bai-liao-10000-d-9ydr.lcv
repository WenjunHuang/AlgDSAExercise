> Problem: [378. 有序矩阵中第 K 小的元素](https://leetcode.cn/problems/kth-smallest-element-in-a-sorted-matrix/description/)

[TOC]

# 思路

> 讲述看到这一题的思路

# 解题方法

> 描述你的解题方法

# 复杂度

- 时间复杂度:

> 添加时间复杂度, 示例： $O(n)$

- 空间复杂度:

> 添加空间复杂度, 示例： $O(n)$

# Code

* []

```Java

class Solution {
  public int kthSmallest(int[][] matrix, int k) {
// 二分法，先获取最小值和最大值
      // 最小值
      int l = matrix[0][0];
      // 最大值
      int r = matrix[matrix.length - 1][matrix[0].length - 1];
      while (l <= r) {
          int mid = l + (r - l) / 2;
          // 获取当前数组matrix中mid为第几小的元素
          int nums = findNums(mid, matrix);
          if (nums < k) {
              // 说明mid还需要增大
              l = mid + 1;
          } else if (nums > k){
              // 说明mid需要减小
              r = mid - 1;
          } else {
              // 当前mid满足条件，在数组中存在k个数不大于mid，但是mid不一定存在于数组中，所以继续减小mid，
              // 类似于二分法找到最左边的元素，最后一个数肯定是存在数组中的
              r = mid - 1;
          }
      }
      return r + 1;
  }



  /**
   *   找到target元素在matrix中为第几小的元素，也就是大于等于多少个数
   */
  private  int findNums(int target, int[][] matrix) {
      int i = 0;
      int ans = 0;
      int j = matrix[0].length - 1;
      //起始位置为数组matrix第一行的最右边位置，如果target大于该数字，则应该左移减少，否则应该下移增大
      while (i < matrix.length && j >= 0) {
          if (target >= matrix[i][j]) {
              ans += j + 1;
              i++;
          } else {
              j--;
          }
      }
      return ans;
  }
}

```

